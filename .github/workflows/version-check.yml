name: Version Check

on:
  pull_request:
    branches: [ main ]

jobs:
  check-version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install semver
      run: pip install semver
    
    - name: Check version bump
      run: |
        # Get version from PR branch
        PR_VERSION=$(grep "^__version__ = " __init__.py | cut -d "'" -f 2)
        
        # Get version from main branch
        git fetch origin main
        MAIN_VERSION=$(git show origin/main:__init__.py | grep "^__version__ = " | cut -d "'" -f 2)
        
        echo "Main branch version: $MAIN_VERSION"
        echo "PR branch version: $PR_VERSION"
        
        # Check if versions are different
        if [ "$PR_VERSION" = "$MAIN_VERSION" ]; then
          echo "❌ Error: Version not updated. Please bump the version in __init__.py"
          exit 1
        fi
        
        # Validate semantic versioning format
        python -c "import semver; semver.Version.parse('$PR_VERSION')" || {
          echo "❌ Error: Invalid semantic version format: $PR_VERSION"
          echo "Version must follow semantic versioning (e.g., 2.0.0, 2.1.0, 2.0.1)"
          exit 1
        }
        
        python -c "import semver; semver.Version.parse('$MAIN_VERSION')" || {
          echo "❌ Error: Main branch has invalid semantic version: $MAIN_VERSION"
          exit 1
        }
        
        # Check if new version is greater than old version
        python << EOF
        import semver
        import sys
        
        main_ver = semver.Version.parse('$MAIN_VERSION')
        pr_ver = semver.Version.parse('$PR_VERSION')
        
        if pr_ver <= main_ver:
            print(f"❌ Error: New version ({pr_ver}) must be greater than current version ({main_ver})")
            sys.exit(1)
        
        # Determine version bump type
        if pr_ver.major > main_ver.major:
            bump_type = "MAJOR"
        elif pr_ver.minor > main_ver.minor:
            bump_type = "MINOR"
        elif pr_ver.patch > main_ver.patch:
            bump_type = "PATCH"
        else:
            bump_type = "UNKNOWN"
        
        print(f"✅ Valid version bump: {main_ver} → {pr_ver} ({bump_type})")
        EOF
    
    - name: Check version consistency
      run: |
        # Check that version is consistent across files
        INIT_VERSION=$(grep "^__version__ = " __init__.py | cut -d "'" -f 2)
        SETUP_VERSION=$(grep "version=" setup.py | grep -v "python_requires" | cut -d "'" -f 2)
        TOML_VERSION=$(grep "^version = " pyproject.toml | cut -d '"' -f 2)
        
        echo "Versions found:"
        echo "  __init__.py: $INIT_VERSION"
        echo "  setup.py: $SETUP_VERSION"
        echo "  pyproject.toml: $TOML_VERSION"
        
        if [ "$INIT_VERSION" != "$SETUP_VERSION" ] || [ "$INIT_VERSION" != "$TOML_VERSION" ]; then
          echo "❌ Error: Version mismatch across files"
          echo "Please ensure version is consistent in __init__.py, setup.py, and pyproject.toml"
          exit 1
        fi
        
        echo "✅ Version is consistent across all files"
